function loadGist(el) {
    let match = el.innerHTML.match(/^(https:\/\/gist.*)(\.js)?$/);
    if (!match) {
      return;
    }
    if (el.tagName === 'A') {
      // showdown mode. need to go up one level above the <a> tag
      el = el.parentElement;
    }
    el.innerHTML = '';
    postscribe(el, '<script src=' + match[1] + '.js><\/script>');
  };

  function formatCode(el) {
    // in "basic html" environments, (for example, testing
    // in a repl) we should use the innerHTML function 
    // to get at the raw text we want to modify and highlight.
    // but in webflow, the rtf field inserts <br> tags
    // and escapes entities, and showdown escapes html entities,
    // so in those cases the easiest way to get "clean"
    // text is the innerText function.
    let showdownMode = (el.tagName === 'CODE'),
        accessor = 'innerHTML';
    if (!showdownMode ||
        el.innerText.split('\n').length > 1) {
      accessor = 'innerText';
    } 
    // find our magic declaration string. if we don't find it,
    // do nothing
    let match = el[accessor].match(/--\s*CODE\s+(.*)\s?--/),
        classNames, codeEl;
    if (match && match[1]) {
      classNames = match[1];
    } else {
      return;
    }
    // strip off the magic string, everything preceding it, and
    // all leading and trailing whitespace
    let txt = el[accessor].substring(match.index+match[0].length).trim();
    el.innerHTML = '';
    if (classNames.match(/language-markup/)) {
      codeEl = document.createElement('script');
      codeEl.type = 'text/plain';
    } else {
      codeEl = document.createElement('pre').
                        appendChild(document.createElement('code'));
    }
    codeEl.className = classNames.trim();
    if (showdownMode) {
      // go up two levels to replace the <pre><code> generated by showdown
      el.parentElement.parentElement.
                       replaceChild(codeEl.parentElement || codeEl,
                                    el.parentElement);
    } else {
      // go up one level to replace the <p> generated by webflow
      el.parentElement.replaceChild(codeEl,el);
    }
    codeEl.innerHTML = txt;
  }

  function rtfToMarkdown(el) {
    let txt = el.innerHTML;
    txt = txt.replace(/<p>/g, '');
    txt = txt.replace(/<\/p>/g, '\n\n');
    txt = txt.replace(/<br>/g, '\n');
    txt = txt.replace(/&nbsp;/g, ' ');
    txt = txt.replace(/&lt;/g, '<');
    txt = txt.replace(/&gt;/g, '>');
    txt = txt.replace(/&amp;lt;/g, '&lt;');
    // console.log(txt);
    return txt;
  }

  function markdownToHtml(txt) {
    let converter = new showdown.Converter({
      noHeaderId: true,
      headerLevelStart: 2,
      literalMidWordUnderscores: true
    });
    let html = converter.makeHtml(txt);
    // console.log(html);
    return html;
  }

  // if there are elements with a class named 'markdown'
  // attached, first convert their content to html 
  let markdowns = $('[data-markdown]');
  markdowns.toArray().forEach((el) => {
    let txt = rtfToMarkdown(el),
        html = markdownToHtml(txt);
    el.innerHTML = html;
  });

  // syntax-highlight elements that contain a string like
  //   -- CODE language-foo optional additional classes --
  // if we're working with a raw webflow rtf field, we want
  // to grab matching <p> elements. if we're working with
  // html that we've run through showdown, we want to grab
  // matching <code> elements 
  let snips = $('p:contains("CODE"),code:contains("CODE")');
  snips.toArray().forEach(formatCode);
  Prism.highlightAll();

  // load a github gist two ways:
  // 1. from <p> elements that contain a string like
  //   -- GIST https://gist/...full-gist-url --
  // 2. from <a> elements that contain only gist urls as content
  let gists = $('p:contains("GIST"),a:contains("https://gist.github.com")');
  gists.toArray().forEach(loadGist);
